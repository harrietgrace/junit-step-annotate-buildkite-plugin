#!/usr/bin/env ruby

require 'rexml/document'

# Reads a list of junit files and returns a nice Buildkite build annotation on
# STDOUT that summarizes any failures.

junits_dir = ARGV[0]
abort("Usage: annotate <junits-dir>") unless junits_dir
abort("#{junits_dir} does not exist") unless Dir.exist?(junits_dir)

job_name = ENV["BUILDKITE_LABEL"]
job_id = ENV["BUILDKITE_JOB_ID"]

class Failure < Struct.new(:name, :classname, :body, :job, :type)
end

junit_report_files = Dir.glob(File.join(junits_dir, "**", "*"))
failures = []

junit_report_files.sort.each do |file|
  next if File.directory?(file)

  STDERR.puts "Parsing #{file.sub(junits_dir, '')}"
  xml = File.read(file)
  doc = REXML::Document.new(xml)

  REXML::XPath.each(doc, '//testsuite//testcase') do |testcase|
    name = testcase.attributes['name'].to_s
    classname = testcase.attributes['classname'].to_s
    testcase.elements.each("failure") do |failure|
      failures << Failure.new(name, classname, failure.text, job_id, :failure)
    end
    testcase.elements.each("error") do |error|
      failures << Failure.new(name, classname, error.text, job_id, :error)
    end
  end
end

STDERR.puts "--- ❓ Checking failures"

if failures.empty?
  STDERR.puts "There were no failures/errors 🙌"
  exit 0
else
  STDERR.puts "There #{failures.length == 1 ? "is 1 failure/error" : "are #{failures.length} failures/errors" } 😭"
end

STDERR.puts "--- ✍️ Preparing annotation"

failures_count = failures.select {|f| f.type == :failure }.length
errors_count = failures.select {|f| f.type == :error }.length

error_string = [
  failures_count == 0 ? nil : (failures_count == 1 ? "1 failure" : "#{failures_count} failures"),
  errors_count === 0 ? nil : (errors_count == 1 ? "1 error" : "#{errors_count} errors"),
].compact.join(" and ")

puts "<h3>#{job_name} - (#{error_string})</h3>\n\n"
failures.group_by {|v| v.classname }.each do |classname, failures|
  puts "<h5><strong>#{classname}</strong></h5>\n\n"
  failures.each do |failure|
    puts "<details>"
    puts "<summary><code>#{failure.name}</code></summary>\n\n"
    puts "<code><pre>#{failure.body.chomp.strip}</pre></code>\n\n"
    puts "</details>\n"
  end
  puts "\n\n"
end
puts "\n\n"
