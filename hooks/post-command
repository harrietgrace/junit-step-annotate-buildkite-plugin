#!/bin/bash

set -euo pipefail

# Reads either a value or a list from plugin config
function plugin_read_list() {
  local prefix="BUILDKITE_PLUGIN_JUNIT_STEP_ANNOTATE_$1"
  local parameter="${prefix}_0"

  if [[ -n "${!parameter:-}" ]]; then
    local i=0
    local parameter="${prefix}_${i}"
    while [[ -n "${!parameter:-}" ]]; do
      echo "${!parameter}"
      i=$((i+1))
      parameter="${prefix}_${i}"
    done
  elif [[ -n "${!prefix:-}" ]]; then
    echo "${!prefix}"
  fi
}

PLUGIN_DIR="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)/.."

echo "--- :junit: Obtaining the junit reports"

reports_paths=$(plugin_read_list REPORTS_PATHS)
reports_dir="$(pwd)/$(mktemp -d "junit-step-annotate-plugin-reports-tmp.XXXXXXXXXX")"
annotation_dir="$(pwd)/$(mktemp -d "junit-step-annotate-plugin-annotation-tmp.XXXXXXXXXX")"
annotation_path="${annotation_dir}/annotation.md"

function cleanup {
  rm -rf "${reports_dir}"
  rm -rf "${annotation_dir}"
}

trap cleanup EXIT

for file in $reports_paths; do
  if [ -e "$file" ]; then
    cp -r "$file" "$reports_dir";
  fi
done

echo "--- :junit: Processing the junits"

docker \
  --log-level "error" \
  run \
    --rm \
    --volume "$reports_dir:/junits" \
    --volume "$PLUGIN_DIR/ruby:/src" \
    -e BUILDKITE_JOB_ID=$BUILDKITE_JOB_ID \
    -e BUILDKITE_LABEL="$BUILDKITE_LABEL" \
    ruby:2.5-alpine /src/bin/annotate /junits \
      > "$annotation_path"

cat "$annotation_path"

if grep -q "<details>" "$annotation_path"; then
  echo "--- :buildkite: Creating annotation"
  # shellcheck disable=SC2002
  cat "$annotation_path" | buildkite-agent annotate --job $BUILDKITE_JOB_ID --context "$BUILDKITE_LABEL" --style error
elif [ "${BUILDKITE_COMMAND_EXIT_STATUS:-0}" -ne 0 ]; then
  buildkite-agent annotate "$BUILDKITE_LABEL completed with an error!" --job $BUILDKITE_JOB_ID --context "$BUILDKITE_LABEL" --style error
else
  buildkite-agent annotate "$BUILDKITE_LABEL completed with success!" --job $BUILDKITE_JOB_ID --context "$BUILDKITE_LABEL" --style success
fi
